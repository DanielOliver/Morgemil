trigger:
- master

variables:
  buildConfiguration: 'Release'
  codecovToken: ''

pool:
  vmImage: 'Ubuntu-16.04'

steps:
- script: dotnet restore
  displayName: 'dotnet restore'
  workingDirectory: src

- script: dotnet build --configuration $(buildConfiguration)
  displayName: 'dotnet build $(buildConfiguration)'
  workingDirectory: src
    
- task: DotNetCoreCLI@2
  displayName: 'dotnet publish game engine $(buildConfiguration)'
  inputs:
    command: publish
    projects: src/Morgemil.GameEngine/Morgemil.GameEngine.fsproj
    arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/gameengine'
    zipAfterPublish: True
    publishWebProjects: false

- task: DotNetCoreCLI@2
  displayName: 'dotnet publish console $(buildConfiguration)'
  inputs:
    command: publish
    projects: src/Morgemil.Console/Morgemil.Console.fsproj
    arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/console'
    zipAfterPublish: True
    publishWebProjects: false

- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)/gameengine' 
    artifactName: 'gameengine'    
   
- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)/console' 
    artifactName: 'console'

- task: DotNetCoreCLI@2
  displayName: 'dotnet test $(buildConfiguration)'
  inputs:
    command: test
    projects: '**/*Tests/*.fsproj'
    arguments: '--configuration $(buildConfiguration) /p:AltCoverForce=true /p:AltCover=true'
    publishTestResults: true

- script: 'dotnet reportgenerator -reports:"../../**/coverage.xml" -targetdir:"$(Agent.TempDirectory)/coveragereport" -reporttypes:"HtmlInline_AzurePipelines;Cobertura" -assemblyfilters:"+Morgemil.*;-Morgemil.*.Tests"'
  displayName: 'dotnet reportgenerator'
  workingDirectory: src/Morgemil.Data.Tests

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: cobertura
    summaryFileLocation: $(Agent.TempDirectory)/coveragereport/Cobertura.xml
    reportDirectory: $(Agent.TempDirectory)/coveragereport
    failIfCoverageEmpty: true

- script: bash <(curl -s https://codecov.io/bash) -t $(codecovToken)
  displayName: CodeCov upload